### General settings ###
RUST_LOG=debug

### SP1 Configuration settings ###
# one of:
# network - uses Succinct prover network.
# local - runs local prover. NOTE: local proofs require significant amount of ram
#         https://docs.succinct.xyz/generating-proofs/basics.html
SP1_PROVER=network
# If SP1_PROVER=network, set to your whitelisted private key. For more information, see:
# https://docs.succinct.xyz/prover-network/setup.html#key-setup
SP1_PRIVATE_KEY=

### Proof-related settings ###
# set to store cached proofs locally
PROOF_CACHE_DIR=

### Beacon state reader settings ###
# one of:
# file - reads from folder, expects something else to put beacon state and header there
#        BS_FILE_STORE must be set
# rpc -  reads from beacon state RPC. CONSENSUS_LAYER_RPC and BEACON_STATE_RPC must be set
#       
# rpc_cached - reads from beacon state RPC, but uses a file folder as a read-through cache.
#              BS_FILE_STORE, CONSENSUS_LAYER_RPC and BEACON_STATE_RPC must be set
BS_READER_MODE=
# omit if not using file cache (i.e. mode = rpc)
BS_FILE_STORE=

### EVM config ###
EVM_CHAIN=
CHAIN_ID=
PRIVATE_KEY=
CONTRACT_ADDRESS=

### API Endpoints ###
EXECUTION_LAYER_RPC=
CONSENSUS_LAYER_RPC=
# Technically, beacon state API endpoint is part of the consensus layer API
# https://ethereum.github.io/beacon-APIs/#/Debug
# so it could be the same as CONSENSUS_LAYER_RPC
# However, it belongs to a "Debug" group, and many 3rd party API providers disable
# access to it. 
# Ethereum checkpoint sync provider infrastructure (aka Checkpointz, e.g. https://beaconstate.info/)
# uses the same API, so they can be used for trials and development; but for production use
# this needs to be a consensus layer ARCHIVAL node with the debug endpoint accessible. 
# Sync infra (Checkpointz) seems to be running full nodes (not archival), so it only provides 
# states for last few epochs (up ~30-35 minutes back), and only at the last epoch slot
BEACON_STATE_RPC=

### Deployment and verification ###
ETHERSCAN_API_KEY=
ETHERSCAN_URL=